<?php

/**
 * @file
 * Redirect to a nice error page on PHP fatal error.
 */

/**
 * Implements hook_init().
 *
 * We cannot use hook_boot() because the url() function is
 * not available at this time.
 */
function hide_php_fatal_error_init() {
  register_shutdown_function('hide_php_fatal_error_shutdown');
  define('HIDE_PHP_FATAL_ERROR_URL', url('site-error'));
}

/**
 * Implements hook_menu().
 */
function hide_php_fatal_error_menu() {
  $items = array();

  $items['site-error'] = array(
    'title' => 'Error',
    'page callback' => 'hide_php_fatal_error_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Menu callback; display a nice error page.
 */
function hide_php_fatal_error_page() {
  return t('The website encountered an unexpected error. Please try again later.');
}

/**
 * Shutdown function that catches fatal errors.
 */
function hide_php_fatal_error_shutdown() {
  if(!is_null($error = error_get_last()) && $error['type'] === E_ERROR) {
    header('Location: ' . HIDE_PHP_FATAL_ERROR_URL);

    // We need to reuse the code from _backdrop_error_handler_real() to
    // force the maintenance page.
    require_once BACKDROP_ROOT . '/core/includes/errors.inc';

    $types = backdrop_error_levels();
    list($severity_msg, $severity_level) = $types[$error['type']];

    if (!function_exists('filter_xss_admin')) {
      require_once BACKDROP_ROOT . '/core/includes/common.inc';
    }

    // We consider recoverable errors as fatal.
    $error = array(
      '%type' => isset($types[$error['type']]) ? $severity_msg : 'Unknown error',
      // The standard PHP error handler considers that the error messages
      // are HTML. We mimic this behavior here.
      '!message' => filter_xss_admin($error['message']),
      '%file' => $error['file'],
      '%line' => $error['line'],
      'severity_level' => $severity_level,
    );

    watchdog('php', '%type: !message (line %line of %file).', $error, $error['severity_level']);
    exit;
  }
}
